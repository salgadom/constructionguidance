{"version":3,"sources":["sagas/index.js","reducers/index.js","actions/types.js","store/index.js","selectors/index.js","components/App.jsx","actions/index.js","serviceWorker.js","index.js"],"names":["rootSaga","combineReducers","filters","state","search","type","has","status","notes","action","payload","by","value","data","configureStore","sagaMiddleware","createSagaMiddleware","store","createStore","rootReducer","compose","applyMiddleware","process","run","filtersSelector","filteredListSelector","createSelector","otherFilters","list","filter","item","key","note","length","jssearch","JsSearch","addIndex","addDocuments","TopSection","styled","Col","MainSection","connectedApp","connect","filteredList","filterBy","defaultSortBy","searchInKeys","itemsPerPage","useState","searchInput","setSearchInput","Container","fluid","Row","className","Accordion","as","defaultActiveKey","sm","size","style","width","height","InputGroup","FormControl","placeholder","onChange","e","target","Append","Button","variant","Toggle","eventKey","Filter","title","Collapse","ButtonToolbar","ToggleButtonGroup","name","defaultValue","ToggleButton","defaultDirection","paginate","render","setSortBy","sortBy","direction","activePage","toggleDirection","goToPage","nextPage","prevPage","pages","map","id","created","first","last","test","centre","date","time","Boolean","window","location","hostname","match","dispatch","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b52baf99.chunk.js","sourcesContent":["export default function* rootSaga() {\n    \n}","import {combineReducers} from 'redux'\nimport { FILTER, DATA_RECEIVED } from '../actions/types'\n\nconst data = (state = [], action) => {\n    switch(action.type){\n        case DATA_RECEIVED: \n            return action.payload\n        default:\n            return state\n    }\n}\n\nconst filters = (state = {\n    search: '',\n    type: 0,\n    has: 0,\n    status: 0,\n    notes: 0\n}, action) => {\n    switch(action.type){\n        case FILTER:\n            return {\n                ...state,\n                [action.payload.by]: action.payload.value\n            }\n        default:\n            return state\n    }\n}\n\nexport default combineReducers({\n    filters,\n    data\n})","export const FILTER = 'FILTER'\nexport const DATA_RECEIVED = \"DATA_RECEIVED\"","import {createStore, applyMiddleware, compose} from 'redux'\nimport createSagaMiddleware from 'redux-saga'\nimport rootSaga from '../sagas'\nimport rootReducer from '../reducers'\n\nconst configureStore = () => {\n    const sagaMiddleware = createSagaMiddleware()\n    const store = createStore(\n        rootReducer,\n        compose(\n            applyMiddleware(sagaMiddleware),\n            process.env.NODE_ENV !== \"production\" && window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n        )\n    )\n\n    sagaMiddleware.run(rootSaga)\n\n    return store\n}\n\nexport default configureStore","import {createSelector} from 'reselect'\nimport * as JsSearch from 'js-search'\n\nexport const filtersSelector = state => state.filters\n\nexport const dataSelector = state => state.data\n\nexport const filteredListSelector = createSelector(\n    filtersSelector,\n    dataSelector,\n    (filters, data) => {\n        const {search, notes, ...otherFilters} = filters\n\n        const list = data.filter(item => {\n            for(let key in otherFilters){\n                if(filters[key] === 0) continue\n                if(item[key] !== filters[key]) return false\n            }\n\n            return notes === 1 ? item.note.length > 0: \n            notes === 2 ? item.note.length < 1: \n            true\n        })\n\n        const jssearch = new JsSearch.Search('id')\n\n        jssearch.addIndex('first')\n        jssearch.addIndex('last')\n        jssearch.addIndex('test')\n        jssearch.addIndex('centre')\n        jssearch.addDocuments(list)\n\n        return search !== '' ? jssearch.search(search): list\n    }\n)","import React, {useState} from 'react'\nimport {Container, Row, Col, InputGroup, FormControl, Button, ButtonToolbar, ToggleButton, ToggleButtonGroup, Accordion} from 'react-bootstrap'\nimport { KeyboardArrowDown } from 'styled-icons/material'\nimport { Filter } from 'styled-icons/boxicons-regular/Filter'\nimport { Globe } from \"styled-icons/boxicons-regular/Globe\"\nimport { PhoneInTalk } from \"styled-icons/material/PhoneInTalk\"\nimport { Dashboard } from \"styled-icons/boxicons-solid/Dashboard\";\nimport styled from 'styled-components'\nimport { connect } from \"react-redux\"\nimport {filterBy} from '../actions'\nimport {filtersSelector, filteredListSelector} from '../selectors'\n\nimport DataSort from \"react-data-sort\";\n\nconst TopSection = styled(Col)`\nbackground: rgb(33,172,140);\nbackground: linear-gradient(90deg, rgba(33,172,140,1) 0%, rgba(30,138,178,1) 100%);\npadding-top:15px;\ncolor:#fff;\n`\n\nconst MainSection = styled(Col)`\nmin-height:500px\n`\n\nconst App = ({ filterBy, filters, filteredList = [] /* redux */, defaultSortBy = 'created', searchInKeys = ['name'], itemsPerPage = 25 }) => {\n    const [searchInput, setSearchInput] = useState(filters.search)\n\n    /* Search */\n    const handleSearchInputChange = e => {\n        setSearchInput(e.target.value)\n        filterBy({ by: 'search', value: e.target.value })\n    }\n\n    /* Filters */\n    const handleTypeChange = value => filterBy({ by: 'type', value })\n    const handleHasChange = value => filterBy({ by: 'has', value })\n    const handleStatusChange = value => filterBy({ by: 'status', value })\n    const handleNotesChange = value => filterBy({ by: 'notes', value })\n\n    return (\n        <Container fluid={true}>\n            <Row className=\"mb-3\">\n                <Accordion as={TopSection} defaultActiveKey=\"0\">\n                    <Container>\n                        <Row>\n                            <Col sm={12} className=\"d-flex mb-3 align-items-end\">\n                                <Dashboard size={21} />\n                                <h6 className=\"m-0 ml-1\">Manage client bookings</h6>\n                                <div className=\"bg-white text-dark rounded d-inline-block px-2 py-1 d-flex align-items-center ml-auto\" style={{width:180}}>\n                                    <div className=\"rounded-circle bg-secondary p-2 mr-3 text-light d-flex justify-content-center align-items-center\" style={{width:45, height: 45}}>10</div>\n                                    <div>\n                                        <small className=\"text-muted\">Today</small><br />\n                                        <b>£212</b>\n                                    </div>\n                                    <KeyboardArrowDown size={24} className=\"ml-auto\"/>\n                                </div>\n                            </Col>\n                            <Col sm={12} className=\"mb-3\">\n                                <InputGroup className=\"bg-white rounded p-2\">\n                                    <FormControl className=\"border-0\" placeholder=\"Search by name, test name or test centre\" value={searchInput} onChange={handleSearchInputChange} />\n                                    <InputGroup.Append>\n                                        <Button variant=\"link\" className=\"border-0\">\n                                            <Accordion.Toggle eventKey=\"0\" as={Filter} size={28} className=\"text-dark\" title=\"Open filter options\"/>\n                                        </Button>\n                                    </InputGroup.Append>\n                                </InputGroup>\n                            </Col>\n                            <Col sm={12} className=\"mb-3\">\n                                <Accordion.Collapse eventKey=\"0\">\n                                    <div className=\"d-flex\">\n                                        <style type=\"text/css\">\n                                        {`\n                                        .btn-filter {\n                                            color:#999;\n                                            padding:3px 10px;\n                                            font-size:14px;\n                                            margin:0 10px\n                                        }\n                                        .btn-filter.active {\n                                            background:#0098E8;\n                                            color:#fff;\n                                            border-radius:3px!important\n                                        }\n                                        `}\n                                        </style>\n                                        {/* Type */}\n                                        <ButtonToolbar className=\"bg-white d-inline-block rounded py-2 text-dark\">\n                                            <ToggleButtonGroup type=\"radio\" name=\"type\" defaultValue={filters.type} onChange={handleTypeChange}>\n                                                <ToggleButton variant=\"filter\" value={0}>All</ToggleButton>\n                                                <ToggleButton variant=\"filter\" value={1}>\n                                                    <Globe size={18}/>\n                                                </ToggleButton>\n                                                <ToggleButton variant=\"filter\" value={2}>\n                                                    <PhoneInTalk size={18} />\n                                                </ToggleButton>\n                                            </ToggleButtonGroup>\n                                        </ButtonToolbar>\n                                        {/*  */}\n                                        <ButtonToolbar className=\"bg-white d-inline-block rounded py-2 text-dark ml-auto\">\n                                            <ToggleButtonGroup type=\"radio\" name=\"has\" defaultValue={filters.has} onChange={handleHasChange}>\n                                                <ToggleButton variant=\"filter\" value={0}>All</ToggleButton>\n                                                <ToggleButton variant=\"filter\" value={1}>\n                                                    <span className=\"border px-1\">Card</span>\n                                                </ToggleButton>\n                                                <ToggleButton variant=\"filter\" value={2}>\n                                                    <span className=\"border px-1\">Course</span>\n                                                </ToggleButton>\n                                                <ToggleButton variant=\"filter\" value={3}>\n                                                    <span className=\"border px-1\">Course + card</span>\n                                                </ToggleButton>\n                                            </ToggleButtonGroup>\n                                        </ButtonToolbar>\n                                        {/*  */}\n                                        <ButtonToolbar className=\"bg-white d-inline-block rounded py-2 text-dark ml-3\">\n                                            <ToggleButtonGroup type=\"radio\" name=\"status\" defaultValue={filters.status} onChange={handleStatusChange}>\n                                                <ToggleButton variant=\"filter\" value={0}>All</ToggleButton>\n                                                <ToggleButton variant=\"filter\" value={1} className=\"font-weight-bold\">\n                                                    PAID\n                                                </ToggleButton>\n                                                <ToggleButton variant=\"filter\" value={2} className=\"font-weight-bold\">\n                                                    PENDING\n                                                </ToggleButton>\n                                                <ToggleButton variant=\"filter\" value={3} className=\"font-weight-bold\">\n                                                    COMPLETE\n                                                </ToggleButton>\n                                            </ToggleButtonGroup>\n                                        </ButtonToolbar>\n                                        {/*  */}\n                                        <ButtonToolbar className=\"bg-white d-inline-block rounded py-2 text-dark ml-3\">\n                                            <ToggleButtonGroup type=\"radio\" name=\"notes\" defaultValue={filters.notes} onChange={handleNotesChange}>\n                                                <ToggleButton variant=\"filter\" value={0}>All</ToggleButton>\n                                                <ToggleButton variant=\"filter\" value={1}>\n                                                    <span className=\"border px-2\">N</span>\n                                                </ToggleButton>\n                                                <ToggleButton variant=\"filter\" value={2}>\n                                                    <span className=\"border px-2\"><del>N</del></span>\n                                                </ToggleButton>\n                                            </ToggleButtonGroup>\n                                        </ButtonToolbar>\n                                    </div>\n                                </Accordion.Collapse>\n                            </Col>\n                        </Row>\n                    </Container>\n                </Accordion>\n            </Row>\n            <Row>\n                <MainSection>\n                    <Container>\n                        <Row>\n                            <Col sm={12}>\n                            {filteredList.length ? \n                                <DataSort \n                                    key={filters}\n                                    data={filteredList}\n                                    defaultSortBy={defaultSortBy}\n                                    searchInKeys={searchInKeys}\n                                    defaultDirection={'desc'}\n                                    paginate\n                                    itemsPerPage={itemsPerPage}\n                                    render={({\n                                        data,\n                                        setSortBy,\n                                        sortBy,\n                                        direction,\n                                        activePage,\n                                        toggleDirection,\n                                        goToPage,\n                                        nextPage,\n                                        prevPage,\n                                        pages\n                                    }) => (\n                                        <Container>\n                                            <style type=\"text/css\">{`\n                                                .filtered-item {\n                                                    color:#777;\n                                                    font-size:14px\n                                                }\n                                                .tag {\n                                                    padding: 1px 3px;\n                                                    border:1px solid #0098E8;\n                                                    color:#0098E8;\n                                                    font-size:12px\n                                                }\n                                                .has-wrapper span + span {\n                                                    margin-left:5px\n                                                }\n                                                .tag.yellow {\n                                                    border-color:#BFB10C;\n                                                    color:#BFB10C;\n                                                }\n                                                .time-field, .status-field {\n                                                    font-size:12px;\n                                                    color:#999\n                                                }\n                                                .created-field {\n                                                    color:#5688A0;\n                                                    font-weight:bold;\n                                                }\n                                                .status-field {\n                                                    font-weight:bold;\n                                                    color:#999;\n                                                    text-transform:uppercase\n                                                }\n                                                .status-field::after {\n                                                    content: \"Undefined\"\n                                                }\n                                                .status-paid::after {\n                                                    content: \"Paid\"\n                                                }\n                                                .status-complete::after {\n                                                    content: \"Complete\";\n                                                    color:#07CC00\n                                                }\n                                                .status-pending::after {\n                                                    content: \"Pending\";\n                                                    color:#FF0000\n                                                }\n                                            `}</style>\n                                            {data.map(({ id, created, type, first, last, test, centre, date, time, has, status, note }) => (\n                                                <Row key={id} className=\"bg-white py-3 mb-1 filtered-item\">\n                                                    <Col sm={1} className=\"created-field\">\n                                                        {created}\n                                                    </Col>\n                                                    <Col sm={2}>\n                                                        {type === 1 ? \n                                                            <Globe size={15}/>: \n                                                            <PhoneInTalk size={15} />\n                                                        } \n                                                        <span className=\"ml-2\">{first} {last}</span>\n                                                    </Col>\n                                                    <Col sm={2}>\n                                                        {test}\n                                                    </Col>\n                                                    <Col sm={2}>\n                                                        {centre}\n                                                    </Col>\n                                                    <Col sm={3} className=\"d-flex align-items-center\">\n                                                        {date} \n                                                        <b className=\"mx-2 time-field\">\n                                                            {[\"AM\", \"PM\"][time - 1]}\n                                                        </b>\n                                                        <div className=\"has-wrapper\">\n                                                            <span className=\"tag\">Test</span>\n                                                            {(has === 1 || has === 3) && <span className=\"yellow tag\">Card</span>}\n                                                            {(has === 2 || has === 3) && <span className=\"yellow tag\">Course</span>}\n                                                        </div>\n                                                    </Col>\n                                                    <Col sm={2} className=\"d-flex align-items-center\">\n                                                        <span className={`status-field status-${[\"paid\", \"pending\", \"complete\"][status - 1]}`} />\n                                                        {!!note.length && <span className=\"tag ml-auto\">N</span>}\n                                                    </Col>\n                                                </Row>\n                                            ))}\n                                        </Container>\n                                    )}\n                                />:\n                                <p>No result</p>\n                            }\n                            </Col>\n                        </Row>\n                    </Container>\n                </MainSection>\n            </Row>\n        </Container>\n    )\n}\n\nconst connectedApp = connect(state => ({\n    filters: filtersSelector(state),\n    filteredList: filteredListSelector(state)\n}), {\n    filterBy\n})(App)\n\n\nexport default connectedApp","import {FILTER, DATA_RECEIVED} from './types'\n\nexport const filterBy = payload => ({\n    type: FILTER,\n    payload\n})\n\nexport const dataReceived = payload => ({\n    type: DATA_RECEIVED,\n    payload\n})","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport configureStore from \"./store\";\nimport { Provider } from \"react-redux\";\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport { dataReceived } from './actions';\n\nconst store = configureStore()\n\nconst filteredList = [\n    { id: 0, created: 'TD', type: 1, first: 'Joe', last: 'Best', test: 'Math', centre: 'London branch', date: '12/01/2020', time: 1, has: 1, status: 2, note: \"\" },\n    { id: 1, created: 'TD', type: 2, first: 'Kevin', last: 'Hart', test: 'English A Levels', centre: 'London branch', date: '12/01/2020', time: 2, has: 2, status: 1, note: \"fdsfsd\" },\n    { id: 2, created: 'TD', type: 2, first: 'Chester', last: 'Bernie', test: 'English A Levels', centre: 'London branch', date: '12/01/2020', time: 2, has: 3, status: 3, note: \"\" }\n]\n\nstore.dispatch(dataReceived(filteredList))\n\nReactDOM.render(\n<Provider store={store}>\n    <App />\n</Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}